package org.jsp.userbootapp.controller;

import java.util.List;
import java.util.Optional;


import org.hibernate.sql.Delete;
import org.jsp.userbootapp.dto.ResponseStructure;
import org.jsp.userbootapp.dto.User;
import org.jsp.userbootapp.repository.UserRepository;
import org.jsp.userbootapp.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UserController {
	@Autowired
	private UserService service;
	
	@PostMapping("/users")
	public ResponseEntity<ResponseStructure<User>>  saveUser(@RequestBody User u) {
		return service.saveUser(u);
	}
	
	@PutMapping("/users")
	public ResponseEntity<ResponseStructure<User>>  updateUser(@RequestBody User u) {
		return service.saveUser(u);
	}
	
	@GetMapping("users/{id}")
	public ResponseEntity<ResponseStructure<User>> findById(@PathVariable int id) {
		return service.findById(id);
	}
	@DeleteMapping("/users/{id}")
	public ResponseEntity<ResponseStructure<String>> deleteUser(@PathVariable int id) {
		return service.deleteUser(id);
	}
	
	@GetMapping("/users")
	public ResponseEntity<ResponseStructure<List<User>>> findAll() {
		return service.findAll();
	}
	
	@PostMapping("/users/verifyByphone")
	public ResponseEntity<ResponseStructure<User>> verifyUser(@RequestParam long phone, @RequestParam String password) {
		return service.verifyUser(phone, password);
	}
	@PostMapping("/users/verifyByemail")
	public ResponseEntity<ResponseStructure<User>> verifyUser(@RequestParam String email, @RequestParam String password) {
		return service.verifyUser(email, password);
	}
}
	
		
	
	
	//by using responseEntity
//	@Autowired
//	private UserRepository repository;
//	
//	@PostMapping("/users")
//	public ResponseEntity<ResponseStructure<User>>  saveUser(@RequestBody User u) {
//		ResponseStructure<User> structure = new ResponseStructure<>();
//		structure.setData(repository.save(u));
//		structure.setMessage("User saved with id : "+ u.getId());
//		structure.setStatusCode(HttpStatus.CREATED.value());
//		return new ResponseEntity<ResponseStructure<User>>(structure,HttpStatus.CREATED);
// 	}
//	
//	@PutMapping("/users")
//	public ResponseEntity<ResponseStructure<User>> updateUser(@RequestBody User u) {
//		ResponseStructure<User> structure = new ResponseStructure<>();
//		structure.setData(repository.save(u));
//		structure.setMessage("User Updated ");
//		structure.setStatusCode(HttpStatus.ACCEPTED.value());
//		return new ResponseEntity<ResponseStructure<User>>(structure,HttpStatus.ACCEPTED);
//	}
//	 
//	@GetMapping("/users/{id}")
//	public ResponseEntity<ResponseStructure<User>> findById(@PathVariable int id) {
//		ResponseStructure<User> structure = new ResponseStructure<>();
//		Optional<User> recUser = repository.findById(id);
//		if(recUser.isPresent()) {
//			structure.setData(recUser.get());
//			structure.setMessage("User found");
//			structure.setStatusCode(HttpStatus.OK.value());
//			return new ResponseEntity<ResponseStructure<User>>(structure,HttpStatus.OK);
//		}
//		else {
//			structure.setData(null);
//			structure.setMessage("User not found");
//			structure.setStatusCode(HttpStatus.NOT_FOUND.value());
//			return new ResponseEntity<ResponseStructure<User>>(HttpStatus.NOT_FOUND);
//		}
//  	}
//	
//	@DeleteMapping("/users/{id}")
//	public ResponseEntity<ResponseStructure<String>> deleteUser(@PathVariable int id) {
//		ResponseStructure<String> structure = new ResponseStructure<>();
//		Optional<User> recUser = repository.findById(id);
//		if(recUser.isPresent()) {
//			structure.setData("User found");
//			structure.setMessage("User deleted");
//			structure.setStatusCode(HttpStatus.OK.value());
//			repository.delete(recUser.get());
//			return new ResponseEntity<ResponseStructure<String>>(structure,HttpStatus.OK);
//
//		}
//		else {
//			structure.setData(null);
//			structure.setMessage("User not deleted");
//			structure.setData("User not found");
//			structure.setStatusCode(HttpStatus.NOT_FOUND.value());
//			return new ResponseEntity<ResponseStructure<String>>(structure,HttpStatus.NOT_FOUND);
//		}
// 	}
	
	
	//normal sending requests	
//	@PostMapping("/users")
//	public  User saveUSer(@RequestBody  User u) {
//		System.out.println(repository);
//		return repository.save(u);
//		
//	}
//	@PutMapping("/users")
//	public User updateUser(@RequestBody  User u) {
//		return repository.save(u);
//	}
//	
//	@GetMapping("/users/{id}")
//	public User findById(@PathVariable int id) {
//		Optional<User> recUser = repository.findById(id);
//		if(recUser.isPresent())
//			return recUser.get();
//		else
//			return null;
//	}
//	
//	@DeleteMapping("/users/{id}")
//	public boolean deleteUser(@PathVariable int id) {
//		Optional<User> recUser = repository.findById(id);
//		if(recUser.isPresent()) {
//			repository.delete(recUser.get());
//			return true;
//		}
//		return false;
//	}


